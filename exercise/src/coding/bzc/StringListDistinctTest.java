package coding.bzc;

import java.util.HashSet;

/**
 * @ClassNAME StringListDistinctTest
 * @Description TODO
 * @Author yu
 */
public class StringListDistinctTest {
    public static void main(String[] args) {
//        testString();
        testInteger();
    }

    private static void testString() {
        String[] nos = {"Y2M241005039397","Y2M241005034930","Y2M241005034929","Y2M241005034959","Y2M241005038585","Y2M241005038030","Y2M241005034859","Y2M241005038596","Y2M241005039466","Y2M241005034777","Y2M241005038628","Y2M241005033319","Y2M241005034787","Y2M241005033321","Y2M241005038090","Y2M241005033312","Y2M241005034745","Y2M241005033317","Y2M241005034732","Y2M241005036074","Y2M241005034712","Y2M241005033058","Y2M241005034708","Y2M241005036023","Y2M241005034727","Y2M241005036041","Y2M241005038522","Y2M241005033311","Y2M241005033311","Y2M241005033307","Y2M241005033330","Y2M241005033301","Y2M241005033302","Y2M241005033289","Y2M241005031523","Y2M241005035749","Y2M241005031517","Y2M241005033298","Y2M241005033255","Y2M241005033081","Y2M241005036018","Y2M241005033046","Y2M241005033323","Y2M241005031545","Y2M241005033275","Y2M241005033277","Y2M241005035702","Y2M241005035814","Y2M241005031680","Y2M241005031680","Y2M241005033355","Y2M241005031705","Y2M241005034934","Y2M241005038087","Y2M241005034761","Y2M241005039397"};

        HashSet<String> distinct = new HashSet<>();

        for (String no : nos){
            if (distinct.contains(no)){
                System.out.printf(no + ", ");
            }
            distinct.add(no);
        }
    }

    private static void testInteger() {
        Integer[] ids = {282646,282692,282695,282650,282778,282773,282783,282784,282785,282786,282787,282788,282789,282745,282744,282807,282810,282809,282817,282816,282772,282845,282849,282856,282857,282858,282872,282871,282870,282880,282882,282939,282899,282896,282892,282964,282855,282940,282914,282969,282907,282975,282987,282972,282991,282973,282994,283013,283014,283020,283021,283046,283048,283048,283043,283039,283053,283069,283068,283070,283071,283076,283082,283071,283110,283110,283110,283134,283135,282922,283089,283161,283169,282934,283180,283176,283179,283177,283170,283172,283197,283215,283241,283236,283256,283257,283288,283297,283297,283297,283297,283305,283310,283318,283318,283318,283318,283320,283324,283321,283322,283338,283333,283333,283366,283367,283375,283376,283362,283341,283379,283381,283380,283422,283491,283535,283540,283543,283547,283554,283566,283596,283617,283617,283650,283652,283658,283659,283660,283661,283743,283768,283832,283761,283937,283927,283705,283895,283895,283895,283705,283705,283831,284005,284005,282905,284027,283994,284005,283977,284011,284011,284011,283994,284011,284011,284057,284059,284169,284063,284189,284237,284240,284269,284310,284326,284343,284349,284359,284361,284362,284354,284287,284259,284378,283201,284329,284382,284354,284427,284215,284464,283238,284463,284527,284623,284625,284626,284638,284639,284640,284643,284644,284645,284646,284651,284654,284657,284659,284661,284662,284664,284665,284663,284666,284667,284668,284673,284674,284675,284676,284678,284679,284680,284681,284682,284684,284689,284656,284637,284629,284695,284702,284636,284715,284731,284731,284736,284741,284756,284778,284777,284851,284852,284855,284855,284871,284896,284907,284910,284911,284915,284916,284932,284938,284939,284941,284942,284940,284945,284950,284901,284956,284967,284968,284980,284983,284984,284986,284989,285001,285005,285006,285007,285008,285010,285013,285014,285015,285017,285023,285024,285027,285028,285029,285030,285031,285032,285038,285039,285043,285044,285045,285046,285053,285055,285057,285059,285060,285066,285081,285082,285083,285087,285088,285089,285094,285090,285099,285101,285102,285104,285107,285108,285109,285110,285111,285112,285136,285137,285138,285139,285140,285142,285144,285146,285147,285148,285149,285150,285151,285152,285153,285159,285160,285164,285167,285168,285170,285171,285173,285181,285183,285189,285190,285191,285192,285193,285195,285206,285207,285208,285209,285210,285211,285212,285213,285229,285230,285231,285232,285233,285234,285238,285239,285240,285243,285245,285246,285248,285253,285256,285257,285264,285273,285279,285280,285281,285284,285285,285267,285293,285306,285319,285321,285326,285332,285333,285335,285336,285339,285340,285342,285344,285366,285376,285383,285393,285394,285395,285396,285397,285400,285401,285402,285403,285405,285406,285410,285411,285414,285418,285436,285437,285456,285457,285459,285460,285531,285531,285536,285589,285316,285709,285816,285884,285791,285703,285807,285799,286549,337771};
        HashSet<Integer> intDistinct = new HashSet<>();
        for (Integer id : ids){
            if (intDistinct.contains(id)){
                System.out.printf(id + ", ");
            }
            intDistinct.add(id);
        }
    }
}
